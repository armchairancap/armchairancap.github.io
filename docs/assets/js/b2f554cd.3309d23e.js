"use strict";(self.webpackChunkaa=self.webpackChunkaa||[]).push([[6880],{8256:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"2024/04/06/i-like-wrapped-xx-coin","metadata":{"permalink":"/blog/2024/04/06/i-like-wrapped-xx-coin","source":"@site/blog/2024-04-06-i-like-wrapped-xx-coin.md","title":"What I like about the Wrapped XX coin (WXX)","description":"What I like about WXX and what I look forward to","date":"2024-04-06T00:00:00.000Z","formattedDate":"April 6, 2024","tags":[{"label":"cryptocurrency","permalink":"/blog/tags/cryptocurrency"},{"label":"xx network","permalink":"/blog/tags/xx-network"},{"label":"defi","permalink":"/blog/tags/defi"}],"readingTime":9.16,"hasTruncateMarker":false,"authors":[{"name":"ArmchairAncap","url":"https://github.com/armchairancap","imageURL":"https://github.com/armchairancap.png","key":"armchairancap"}],"frontMatter":{"slug":"2024/04/06/i-like-wrapped-xx-coin","title":"What I like about the Wrapped XX coin (WXX)","authors":["armchairancap"],"tags":["cryptocurrency","xx network","defi"],"description":"What I like about WXX and what I look forward to","keywords":["evm","wxx","xx coin","erc20","snowbridge","hypernova","substrate","dex","polkadot","cex","supra"]},"unlisted":false,"nextItem":{"title":"EU puts EU-based privacy coin users in untenable position","permalink":"/blog/2024/03/23/eu-legislation-untenable-for-privacy-coin-users"}},"content":"- [Why it\'s good](#why-its-good)\\n- [Why it\'s important](#why-its-important)\\n- [What\'s not so good](#whats-not-so-good)\\n- [Scavengers welcome](#scavengers-welcome)\\n- [More to come](#more-to-come)\\n- [Wrap-up](#wrap-up)\\n\\n\\nPatCrypt created a great [post](https://patcrypt.com/wxx-all-you-need-to-know-about-the-wrapped-xx-coin/) about the Wrapped XX coin aka WXX with the contract address `0x171120219d3223e008558654ec3254a0f206edb2` (view it on [Etherscan](https://etherscan.io/token/0x171120219d3223e008558654ec3254a0f206edb2)).\\n\\n## Why it\'s good\\n\\nThe main benefits are already called out by Pat:\\n\\n> - Compatibility with the major Decentralised Exchanges (DEXs)\\n> - A shorter route to being listed by Centralised Exchanges (CEXs)\\n\\nThere\'s a lot to like about that, obviously, especially since:\\n\\n- At least one CEX recently rejected xx coin because \\"it\'s a privacy coin\\" (except that it\'s not - I wrote about that [here](/blog/2024/03/23/eu-legislation-untenable-for-privacy-coin-users/))\\n- The globalists have been making progress with their plan to \\"allow but disable\\" private cryptocurrencies\\n- Because of the KYC/AML regulations, listing a coin on a CEX has been expensive for years and now it\'s even worse - it\'s more expensive and more scrutinized\\n\\nBecause of that and because xx coin is not a pump-and-dump/meme coin (although anything that\'s tradeable has people who pump it, and xx coin is no exception), xx coin used to have a hard time getting listed. It\'s been listed on [MEXC](https://www.mexc.com) for some time, but that was about it.\\n\\nI know some vocal MEXC users complain about MEXC (not in the context of xx coin, but in general), but considering it\'s located in a low-hassle country, I think it\'s a great exchange and all things considered, less likely to rat on its users than 90% of other CEX (all the EU-based CEX will have to rat on their users once they codify the latest EU regulations.)\\n\\nIn any case, WXX fixes \\"all of the above\\" (challenges): people will be able to get xx coin on centralized and decentralized markets (and anything in between - more on that later).\\n\\nOf course, just being available on one popular DEX would be enough, but on-chain DEX are not known for great liquidity and they\'re (in my opinion anyway) less user-friendly and less liquid, although this last bit may change as more trading moves to DEX due to the fascist laws passed in communist and capitalist jurisdictions alike. We still want and need CEX exchanges, especially in crypto-friendly jurisdictions (go MEXC!).\\n\\n## Why it\'s important \\n\\nI haven\'t traded xx coin, or any coin for that matter, for many years. I haven\'t (yet) sold any xx coins either. When I have enough for my needs (which I now do), I prefer to do things that interest me - if I have free time I\'d rather [do something interesting and hopefully useful to the community](https://github.com/armchairancap/xx-haven-container) than trade.\\n\\nWhy do I care, then?\\n\\nBecause WXX is good for things I care about, such as privacy and decentralization. \\n\\nIt is very important that xx coin be easy to trade because - see the post on new EU legislation linked above - xx Network plans to introduce postage (fees for prioritized and/or high volume users of its mixing network layer). \\n\\nIf you can\'t buy xx coin, you can\'t pay for postage (once the feature becomes available). That doesn\'t mean you wouldn\'t be able to use xx Network - its mixnet is now completely free to use and I have no reason to think it won\'t retain a generous free tier even when/if postage kicks in.\\n\\nBut I want xx Network to attract large users who pay postage, because that creates a virtuous circle: demand for xx coin to pay for mixnet postage creates a demand for coins earned (and sold) by mixnet runners (\\"validators\\"), which makes xx Network sustainable for both paid and free users. \\n\\nThis may seem trivial now (hey, it\'s free and it\'s working just fine as-is!), but remember this next time you use Signal and get that donation prompt upon starting the app.\\n\\n## What\'s not so good\\n\\nThere isn\'t much not to like. \\n\\nPatCrypt\'s posts mentions some admin to-do\'s and the fact that WXX is currently semi-centralized (which is what I mentioned \\"something in between\\" a CEX and DEX - even when traded on a DEX, it\'s still semi-centralized until EVM bridge comes about, which should be shortly).\\n\\nA wrapped xx Coin was recently listed on the XRP Ledger (XRPL) where liquidity is thin and it appears there aren\'t many users. One may be reasonably skeptical about WXX as well, but I am optimistic because ERC20 tokens are everywhere. Anyone who owns more than two coins probably has an ERC20-compatible wallet or a CEX account and can easily access any DEX by simply installing an app. XRPL is accessible as well, but I feel its main user base are Ripple-focused users, which is fine but not as large as these new markets.\\n\\n## Scavengers welcome\\n\\nI won\'t put this under good or bad, it\'s something that simply is, and can\'t be judged.\\n\\nAn immediate effect of WXX is that its existence increases opportunities for trading, because the more markets which also means more opportunities for arbitrage. \\n\\nWith xx coin available on MEXC, XRPL, WXX (including DEX-es, each of which may be \\"out of sync\\" with others) and the fact that only MEXC has its own API while integrations for others already exist (for different ERC20 tokens, but it just takes a search-and-replace), it\'s no longer prohibitively expensive to build a bot that trades xx coins among several markets. It takes just one MEXC integration and a xx-focused repurposing of ERC20-compatible code for other markets.\\n\\nIt\'s kind of silly, but necessary. Scavengers exist because they need to exist. The main benefit for the regular buyer (or seller) is they get close to best price and liquidity regardless of where they buy (or sell) their coin. \\n\\nRemember that, initially at least - until an Ethereum bridge is built and WXX decentralized - it may be inconvenient to easily move coins between MEXC, XRPL wrapped coin and WXX coin, but this will get easy for WXX once those to-do\'s are completed. For people who engage in arbitrage and move a lot of coins around this means arbitrage will remain inconvenient until that EVM bridge becomes available.\\n\\n## More to come\\n\\nThree things I\'d like to mention here:\\n\\nFirstly, Pat\'s article does mention [Snowbridge](https://docs.snowbridge.network/), a trustless Polkadot bridge technology which - once completed - will bridge Substrate (Polkadot, initially) and Ethereum - something I\'ve been looking forward to since last year.\\n \\nSnowbridge is now getting attention in the xx community, but I think there still isn\'t enough appreciation for what had to happen in order to get here: the fact that xx Network picked a Substrate-based chain, which is the only reason why Snowbridge is now relevant to xx Network in the first place.\\n\\nThey could have picked some cooler \\"next gen\\" blockchain design with even faster finality and whatnot, but they decided to build on Substrate where all chains and parachains benefit from network effect.\\n\\nPerhaps this isn\'t the best comparison, but Substrate can be compared to the Linux kernel. Once an improvement is implemented - due to permissive licensing - it becomes a new feature that every Linux application can use - all Substrate-based blockchains (\\"Linux applications\\") can easily benefit from it. That\'s why it will be relatively easy for xx chain to benefit from Snowbridge without spending many months on developing novel code just for your own project.\\n\\n(This reminds me - even the development effort for a xx Network EVM bridge (that xx Foundation has awarded a grant for) probably significantly benefits from the ability to reference 3rd party EVM bridge implementations for Substrate chains. That\'s why that doesn\'t take quarters, but only months.)\\n\\nSo again, kudos to David Chaum and the team for making a good choice here. Maybe it wasn\'t a hard choice - naturally a decentralized mixnet project would pick a well-maintained and popular chain with governance features built-in, rather than a niche or new chain that requires a lot of in-house chain development - but it was still a choice and they chose wisely.\\n\\nSecondly, due to network effects of the Substrate chain ecosystem, I think it won\'t take long for Polkadot to take advantage of Supra\'s [HyperNova](https://supra.com/news/HyperNova-Consensus/). Punchline:\\n\\n> In short, Supra verifies Ethereum\u2019s L1 consensus cryptographically. \\n\\nIn other words (please visit that link to find out more), Supra\'s HyperNova *does not* need staked bridges that create multi-signature transactions. \\n\\nThe quoted part mentions Ethereum, obviously because that is likely to be the first target for Supra, but the same design applies to other L1 chains. \\n\\nHyperNova is a new design and quarters may pass before it becomes available. But once it does, if Polkadot gets integrated, it becomes easy for xx Chain to get integrated as well. That means a Supra-wrapped xx coin could become instantly available on Supra in a decentralized, management-free and derisked (considering it\'s bridgeless) manner. \\n\\nThirdly, the benefits of Substrate flow in both directions. It is easy for other Substrate projects to connect with xx chain (not just for trading, but for on-chain identity, native assets held, balances, voting history, and other information xx chain holds). You can take a look at the Crust Network (based on a Substrate chain) documentation to see how they have a separate section for integration with Substrate-based chains, for example.\\n\\nThey recently released Ethereum integrations, but even in that case, it\'s nice to have a choice and be able to easily integrate semi-natively using the familiar Polkadot SDK. Ethereum bridges have many advantages (see WXX), but also adds a bit of complexity, risk, round-trip-time and cost. It\'s not the only answer. \\n\\nxx Wallet was able to showcase native Crust Network integration by making their application code to load in one\'s xx wallet. I haven\'t looked if there are multi-coin wallets for Substrate and how they work, but they could make it easy to do buy xx coin for postage and use the purchased \\"message tokens\\" to pay for (xx) mixnet (proxied API) traffic created by Web 3 apps that work on other Substrate chains. It may take a year or two, but it\'s doable.\\n\\nThese are just three examples - there must be more - where Substrate (Polkadot SDK) can take care of 80% of the plumbing. It is much appreciated, but still widely underappreciated!\\n\\n## Wrap-up\\n\\nWXX makes xx coin available to all ERC20-capable wallets and markets. \\n\\nThis is a product of hard and smart work by xx Network developers (including the wise choice to use Polkadot SDK) and the wider Substrate and crypto community.\\n\\nAlso because of Substrate, the best is yet to come. \\n\\n- an integration with Snowbridge could give xx coin a *native and trustless* xx-chain-to-Ethereum bridging \\n- Supra HyperNova - this would also require an xx chain-specific, but not unique, integration and would enable a direct, trustless *and bridgeless* xx-to-Supra cross-chain interoperability. I plan to keep an eye on HyperNova, especially if Substrate or Polkadot are mentioned\\n- DEX for native Substrate coins - useful for multi-currency Substrate wallets and shapeshift-like purchases of xx mixnet credits (to pay for postage)"},{"id":"2024/03/23/eu-legislation-untenable-for-privacy-coin-users","metadata":{"permalink":"/blog/2024/03/23/eu-legislation-untenable-for-privacy-coin-users","source":"@site/blog/2024-03-23-eu-legislation-untenable-for-privacy-coin-users.md","title":"EU puts EU-based privacy coin users in untenable position","description":"Anti-privacy legislation puts EU-based privacy coin users in untenable position","date":"2024-03-23T00:00:00.000Z","formattedDate":"March 23, 2024","tags":[{"label":"cryptocurrency","permalink":"/blog/tags/cryptocurrency"}],"readingTime":4.275,"hasTruncateMarker":false,"authors":[{"name":"ArmchairAncap","url":"https://github.com/armchairancap","imageURL":"https://github.com/armchairancap.png","key":"armchairancap"}],"frontMatter":{"slug":"2024/03/23/eu-legislation-untenable-for-privacy-coin-users","title":"EU puts EU-based privacy coin users in untenable position","authors":["armchairancap"],"tags":["cryptocurrency"],"description":"Anti-privacy legislation puts EU-based privacy coin users in untenable position","keywords":["law","privacy","anonymous","monero","xx coin","eu","aml","AML Package","AMLD6"]},"unlisted":false,"prevItem":{"title":"What I like about the Wrapped XX coin (WXX)","permalink":"/blog/2024/04/06/i-like-wrapped-xx-coin"},"nextItem":{"title":"How to use xx Network CLI","permalink":"/blog/2024/02/09/xx-network-cli-irc-like-client"}},"content":"## Draconian anti-privacy regulations \\n\\ncryptotimes.io [reports](https://www.cryptotimes.io/2024/03/23/eus-new-aml-laws/) on the new anti-money laundering (AML) legislation in the EU:\\n\\n> The new regulations place restrictions on the use of cash. Any cash payment exceeding \u20ac10,000 will be restricted, and any anonymous cash transaction over \u20ac3,000 will be forbidden. Payments with cryptocurrency made with anonymous wallets are prohibited as well. \\n\\nFrom a [page linked from the article](https://www.dilloneustace.com/legal-updates/status-update-on-the-eu-aml-package):\\n\\n> a Regulation on the prevention of the use of the financial system for the purposes of money laundering and terrorist financing (the \u201cEU Single Rulebook\u201d) and the sixth (6th) Anti-Money Laundering Directive (\u201cAMLD6\u201d).\\n\\nPrivacy and cryptocurrency enthusiasts are rightfully outraged.\\n\\nOne point the latter - especially EU-based Monero supporters active on social media such as X - are still missing is that the regulations, once formalized in \\"laws\\" will make their advocacy untenable.\\n\\nOf course that I feel bad for them and other non-criminal users affected by these changes even though I don\'t hold any privacy coins including Monero.\\n\\nThat aside, they are still missing the fact that the regulations put them in an untenable position.\\n\\n## Untenable position\\n\\nIf you\'re an *active* Monero user who uses MNR, you now must report transaction details to the government. \\n\\nIf you do that, what kind of privacy coin is that? It\'s arguably no different from custodial USDT or fiat checking accounts!\\n\\nPromoting Monero while dutifully reporting all transactions and identifying parties in incoming or outgoing transactions would be terribly wrong.\\n\\nBut, since you\'re active on traditional social media, that makes you a high profile target for \\"routine\\" checks and possibly heavy fines. Because of that *not reporting* your transactions becomes very risky for anyone active on centralized social media. \\n\\nThat is what makes the situation of Monero users active in social media untenable. Their choices are becoming very limited.\\n\\nEU residents who continue Monero advocacy on centralized social media have two choices:\\n\\n- inform the government about their Monero transactions\\n- not use Monero at all\\n\\nThose who continue using Monero and do not plan reporting their transactions will be at risk and likely disappear from centralized social media to lower their risk profile.\\n\\nOne group that won\'t be at risk is Monero speculators and traders, but we don\'t need to consider this group as the number of centralized exchanges with Monero pairs in the EU is very limited (and declining) and at the same time using a decentralized exchange for trading and speculation automatically makes one a person who uses anonymous crypto transactions and likely well over the limit.\\n\\nCriminals are the group that will be least affected, that much is sure. \\n\\n## xx coin is unaffected\\n\\nDavid Chaum\'s idea to not make xx coin a privacy coin was very smart. \\n\\nI must admit initially I wanted more privacy features for xx coin, but in hindsight the man knew what he was doing!\\n\\nxx Network and xx chain protect privacy of messages which helps crypto and Web3 users make their transactions and applications much more private, but the coin that runs xx chain is not a privacy coin.\\n\\nThis lower exposure to legislative risks makes it easier for the xx Network community to grow and the coin doesn\'t even need to be widely used for payments.\\n\\n**Staking** - available today - allow nominators to get a return on staked coins.\\n\\nThe first, still missing piece, is work-in-progress: **xx coin on decentralized exchanges**. Today wrapped xx coin is available on [XRPL](https://xrpl.org/), but there is work in progress on EVM bridge which will make it possible to trade xx coin on decentralized cryptocurrency exchanges.\\n\\nEventually xx coin will be used to pay **postage (xxPostage) for premium traffic on xx Network**, which will create demand for it. By then it should be easy to buy it on decentralized cryptocurrency  exchanges.\\n\\nxx coin is not used in mainstream P2P crypto payments and speculation (which is easy to check by looking at turnover). So far its main use case is staking.\\n\\nBecause no coin ownership or transactions are required for participation, EU-based fans of xx Network promote privacy and use the cMix services without holding a single xx coin!\\n\\n## Take-aways\\n\\nMost EU-based promoters of the top privacy coins will gradually cease using their coins in ways that protect privacy. What will they promote then?\\n\\nSome will hodl and drop out, while few others may pump and dump their cons for as long as those coins are listed on a centralized exchange.\\n\\nThose who remain active on centralized social media are very likely *not* going to be the user of the very coin they promote. \\n\\nI therefore expect a significant drop in social media presence of *real* EU-based users of privacy coins. \\n\\nDr. Chaum picked a different way to fight the good fight and latest changes in the EU regulations related to AML do not affect xx Network any more than they affect the regular privacy-less coin. Not to mention that all of us can use the main thing we advocate - xx Network - without any transactions on the xx blockchain. For most users that means no transactions, no reporting and no regulations to worry about."},{"id":"2024/02/09/xx-network-cli-irc-like-client","metadata":{"permalink":"/blog/2024/02/09/xx-network-cli-irc-like-client","source":"@site/blog/2024-02-09-xx-network-cli-irc-like-client.md","title":"How to use xx Network CLI","description":"How to get started with xx Network CLI client","date":"2024-02-09T00:00:00.000Z","formattedDate":"February 9, 2024","tags":[{"label":"xx network","permalink":"/blog/tags/xx-network"}],"readingTime":5.92,"hasTruncateMarker":false,"authors":[{"name":"ArmchairAncap","url":"https://github.com/armchairancap","imageURL":"https://github.com/armchairancap.png","key":"armchairancap"}],"frontMatter":{"slug":"2024/02/09/xx-network-cli-irc-like-client","title":"How to use xx Network CLI","authors":["armchairancap"],"tags":["xx network"],"description":"How to get started with xx Network CLI client","keywords":["xx network","chat","broadcast","cli","text","client","irc"]},"unlisted":false,"prevItem":{"title":"EU puts EU-based privacy coin users in untenable position","permalink":"/blog/2024/03/23/eu-legislation-untenable-for-privacy-coin-users"},"nextItem":{"title":"Case for xx Network chat link in security.txt","permalink":"/blog/2023/06/05/xx-network-chat-security-dot-txt"}},"content":"## Introduction \\n\\nxx Network is a privacy-focused, quantum-resistant \\"small messaging\\" network.\\n\\nBy \\"small messaging\\" I mean up to KB-sized messages, although it\'s possible to use larger messages as well. For example, xx Messenger supports small attachments (tens of KB).\\n\\nxx CLI client is a reference client implementation for xx Network that at this time uses the older \\"broadcast module layer\\" approach. \\n\\nSpeakeasy (Haven) or Echoexx use a better approach (channels), but all of them use the xx Network SDK (xxDK). \\n\\nxx CLI client repository has a read-me file that contains almost all the steps required to get started, but this post can still save you some time.\\n\\n## Build\\n\\nAt this time we need `go1.21`, but check the source to verify if this requirement changed.\\n\\nThese steps are for Linux. Check the repository\'s read-me file for other OS.\\n\\n```sh\\ngit clone https://git.xx.network/elixxir/cli-client && cd cli-client/\\ngo mod vendor && go mod tidy\\nGOOS=linux GOARCH=amd64 go build -ldflags \'-w -s\' -o xx-client main.go\\n```\\n:::info\\nOn ARM64 devices, use `GOARCH=arm64` or omit `GOARCH` (it should be detected automatically).\\n:::\\n\\n## Use xx CLI\\n\\nLet\'s see how to use xx CLI client.\\n\\n### First user\\n\\nSomeone needs to create a broadcast (chat) first.\\n\\nWe can do that with `--new`, and give your broadcast a name and a description. \\n\\nSetup procedure creates 2 files you need to know about: \\n\\n- the first one is the broadcast definition file by default named $CHANNEL.xxchan (here, `test.xxchan`)\\n- the second is a private RSA key for the creator who is also channel admin. This one is by default named `$CHANNEL-privateKey.pem` (here, `test-privateKey.pem`).\\n\\n```sh\\nexport NICK=\\"my-Name\\"\\n./xx-client broadcast --new -o test.xxchan -n \\"test\\" -d \\"Some desc\\"\\n./xx-client broadcast --load -o test.xxchan -u $NICK --waitTimeout 120s\\n./xx-client.linux64 broadcast --load -o test.xxchan -u $NICK --waitTimeout 120s\\n# in case of timeouts try logLevel 1 or 2 with: --logLevel 1\\n```\\n\\n:::tip\\n`test.xxchan` is the broadcast definition file which enables another party to listen to this broadcast. Secure it if your broadcast is private.\\n:::\\n\\nThe default wait timeout value wasn\'t enough, so I extended it with `--waitTimeout`. \\n\\nThe reason is lately some xx Network gateway nodes had difficulties (potentially due to government interference in some countries) which makes it harder to connect. There\'s a log file which you can tail from another terminal to see that.\\n\\nIf you want to use a self-supplied RSA key, use `--key ${FILENAME}` to specify the RSA private key file, such as `--key ~/.ssh/id_rsa_xxcli`.\\n\\n### Second user\\n\\nThe second user needs the broadcast definition file, as there\'s no way to establish chat without it. \\n\\n:::warning\\nShare the broadcast file through Signal or use some other secure sharing method. A chat is no more secure than the medium through which this file has been shared.\\n:::\\n\\nThe second user would normally have another nickname (although they\'re really identified by their private key) and needs to only load the channel, not create it. \\n\\nHere we\'ll create the RSA key manually before we start (as we don\'t need to create a channel). This also means you can reuse existing RSA key if you have it.\\n\\n```sh\\nexport NICK=\\"AnotherGuy\\"\\nssh-keygen -t rsa -f AnotherGuyKeyfile\\n# move your new private key to the default private key file name for the chat \\"test\\"\\nmv AnotherGuyKeyfile test-privateKey.pem\\n# test.xxchan is the configuration file obtained from the first party\\n./xx-client.linux64 broadcast --load -o test.xxchan -u $NICK --waitTimeout 120s\\n```\\n\\n:::tip\\nFor each client we use a different terminal (or different client altogether). Different chats use different broadcast definition files.\\n:::\\n\\nAnd that is it!\\n\\n![xx Network CLI](/img/xx-network-cli-01.png)\\n\\nThere are minor console-related bugs, and you\'ll need to reconnect (simply CTRL+C and then restart) if you get disconnected. \\n\\n## Other details\\n\\nThere are other details that you can find from online help, or by inspecting the code.\\n\\n```raw\\nAvailable Commands:\\n  broadcast   Create or join broadcast channels.\\n  completion  Generate the autocompletion script for the specified shell\\n  generate    Generates version and dependency information for the binary.\\n  help        Help about any command\\n  version     Print the version and dependency information for the binary.\\n\\nFlags:\\n  -c, --config string          Path to YAML file with custom configuration..\\n  -h, --help                   help for cli-client\\n  -v, --logLevel int           Verbosity level for log printing (2+ = Trace, 1 = Debug, 0 = Info).\\n  -l, --logPath string         File path to save log file to. (default \\"cli-client.log\\")\\n      --ndf string             Path to the network definition JSON file. By default, the prepacked NDF is used.\\n  -p, --password string        Password to the session file.\\n  -s, --session string         Sets the initial storage directory for client session data. (default \\"session\\")\\n      --waitTimeout duration   Duration to wait for messages to arrive. (default 15s)\\n```\\n\\n## Use cases\\n\\nxx CLI client cannot communicate with Speakeasy or Echoexx - as noted earlier, these use different module of xxDK.\\n\\nBut it can be useful on its own. Some examples:\\n\\n- secure & private DM or group chat client for headless and remote systems without X Window System - like IRC, but with fewer features and more secure and private\\n- share IT-related secrets such as passwords and .env files with yourself or colleagues: load channel file, start the client, send or receive secrets and then delete the entire directory on the temporary client \\n\\nA bit more on this last use case. You should use encrypted boot volume or change the secret if it\'s critical, as it\'s not technically possible to shred/wipe a single file on an unencrypted flash disk. For this use case you need to be able to get out to the Internet which is often, but not always (e.g. LAN) possible.\\n\\nThere are CLI scripts for \\"secure\\" password sharing, but they rely on personal infrastructure (some server & DB which may or may not be secure), or 3rd party infrastructure which may or may not be more secure than xx Network (and often doesn\'t have open source code on both the server and client).\\n\\nThere\'s also Tailscale, but again - to be equally secure, you still have to encrypt your data before sending it and probably at-rest as well (considering that the client is \\"online\\" at all times). If you can make use of Tailscale for other things that\'s great, but if you need something quick - like when setting up some VMs in the cloud - xx CLI client could be good enough.\\n\\nxx CLI client could also be modified for other purposes, for example as a low censorship-free broadcast tool without the need for Tor (which mony networks block in any case). Access to the xx Network gateways can also be blocked, but most jurisdictions and corporate firewalls haven\'t done it yet.\\n\\nAs of now, xx Network gateways retain client side-encrypted data for 21 days, after which it expires and may be found only on the clients (if they logged in and downloaded it before it expired). So, keep in mind that you may shred the local session file, channel file and private key to disable access locally, while chat data stored on xx Network gateways expires in weeks. What you cannot delete is the messages other clients received on their side without access to those clients."},{"id":"2023/06/05/xx-network-chat-security-dot-txt","metadata":{"permalink":"/blog/2023/06/05/xx-network-chat-security-dot-txt","source":"@site/blog/2023-06-05-security-text-file.md","title":"Case for xx Network chat link in security.txt","description":"Case for xx Network Haven chat link in security.txt","date":"2023-06-05T00:00:00.000Z","formattedDate":"June 5, 2023","tags":[{"label":"xx network","permalink":"/blog/tags/xx-network"},{"label":"haven","permalink":"/blog/tags/haven"}],"readingTime":2.58,"hasTruncateMarker":false,"authors":[{"name":"ArmchairAncap","url":"https://github.com/armchairancap","imageURL":"https://github.com/armchairancap.png","key":"armchairancap"}],"frontMatter":{"slug":"2023/06/05/xx-network-chat-security-dot-txt","title":"Case for xx Network chat link in security.txt","authors":["armchairancap"],"tags":["xx network","haven"],"description":"Case for xx Network Haven chat link in security.txt","keywords":["xx network","haven","security.txt","chat","contact"]},"unlisted":false,"prevItem":{"title":"How to use xx Network CLI","permalink":"/blog/2024/02/09/xx-network-cli-irc-like-client"},"nextItem":{"title":"Sign and verify messages using xx Network wallet","permalink":"/blog/2023/05/08/xx-network-wallet-sign-verify"}},"content":"## security.txt\\n\\nThe Dutch Digital Trust Center mandates that all government sites must have a security files under the `.well-known` directory located at the root of Web site.\\n\\nUse cases:\\n\\n- Go-to place to get information on how to report vulnerabilities affecting the site or organization\\n- Improve the speed of getting in touch\\n\\n## Example\\n\\nhttps://www.ncsc.nl/.well-known/security.txt captured on Jun 1, 2023.\\n\\n```raw\\n-----BEGIN PGP SIGNED MESSAGE-----\\nHash: SHA512\\n\\n# Domeinen van de Rijksoverheid kunnen met een 302 redirect verwijzen naar\\n# het centrale bestand op https://www.ncsc.nl/.well-known/security.txt\\n# omdat het NCSC het centrale meldpunt is voor kwetsbaarheden en incidenten\\n# voor de Rijksoverheid.\\n#\\n# Dutch central government domains can redirect to the central file located\\n# at https://www.ncsc.nl/.well-known/security.txt with a 302 redirect,\\n# because NCSC-NL is the central point of contact for vulnerabilities and\\n# incidents for the Dutch central government.\\n\\nExpires: 2024-01-31T22:59:00.000Z\\nCanonical: https://www.ncsc.nl/.well-known/security.txt\\n\\nPolicy: https://www.ncsc.nl/contact/kwetsbaarheid-melden\\nPolicy: https://english.ncsc.nl/contact/reporting-a-vulnerability-cvd\\n\\nContact: https://www.ncsc.nl/contact/kwetsbaarheid-melden\\nContact: https://english.ncsc.nl/contact/reporting-a-vulnerability-cvd\\nContact: mailto:security@ncsc.nl\\nEncryption: https://www.ncsc.nl/contact/pgp-key\\nPreferred-Languages: nl, en\\n\\nAcknowledgments: https://www.ncsc.nl/wall-of-fame\\nHiring: https://www.werkenvoornederland.nl\\n\\n-----BEGIN PGP SIGNATURE-----\\nVersion: Encryption Desktop 10.4.2 (Build 1298)\\nCharset: utf-8\\n\\nwsDVAwUBY+9c0P4Vd0fJc7lbAQpUmQwAwZ1vWyI1VKBChsciufRcvxy5zzMZMx6v\\nYjD5CXuDV4GL+tRl7wClnQO023e3ZChTH69y7O3veS+5/zNVUvpyqJfS8pNzG0pA\\nB4vea3fQ41t5UpCVYvPopIFiT1oeQJA9w4NqBD2+2jW5lS5L8k9xz192gWJvhxq8\\nmTukJXYDiJLzxKbUMHEG2GNaMeoRj5Pvgr8buzQELP0VZHfzF05Hr6NOoWvS6SRX\\nKGW6rgg6fEUPcMTjBqn6gL/w82FXwrh93AmYkP/sBWP4It3NpbiNuazc5iynhhih\\n+ZlfzsFV6agF4MZR0IQZ6X4jsCxKFrPIWW51/7W+PIDkqy6za/bDjDeiinid0HOC\\n2rro6N9FXSyxHz9nteMppd+YMTCt+Z67HONsssR+7ojxORGOs0rTcjUucaVikFJQ\\nwAls9p+vuIzFRViQaXe3Nndspr1cCIu4z3ZfdkcWREQP7acOjNgbmeQOlH4jnYWq\\nlNVMWzOncidAWM0nXcuYTjZagRAagthF\\n=yC4A\\n-----END PGP SIGNATURE-----\\n```\\n\\n## Use case for Haven\\n\\n- security.txt is PGP-signed to confirm that it was signed by the key owner and that\'s fine. But in reality most people hate to use it to compose emails or messages\\n- it is time-consuming for the recipient to download every sender\'s key which also delays reading encrypted messages\\n- Haven gives the reporter anonymity, both parties enjoy encryption and privacy, and can interact in real time (and still move to email if they so choose)\\n- Haven uses quantum-resistant encryption (I haven\'t checked, but it should be superior to PGP)\\n\\nHaven public chat link can be added to security.txt. Example: \\n\\n```raw\\nChat: https://.............. (security vulnerabilities only)\\nContact: email - mailto:.........; chat - send DM to `aCertainTestifier`\\nEncryption: https://www..../contact/pgp-key\\n```\\n\\nBecause public chat could have several permanently present strangers in it, direct messages (DM) should be sent to contact person.\\n\\nWhat are the weaknesses of using Haven here? \\n\\nThe way I see it, the biggest is that xx Network keeps messages for 21 days and then they disappear. To prevent the situation where nothing happens for three weeks and messages disappear, the reporting person should move on to email if no response is received within hours.\\n\\nWith time, spam may become a problem for Haven. But it is already a problem for email now, so Haven is not worse.\\n\\n## Conclusion\\n\\nHaven uses xx Network to store encrypted messages and Haven users can connect to xx Network from any (trusted) application server - whether it\'s container on own desktop client, the official Haven instance, etc. \\n\\nCompared to an email or Web service as means of communication, Haven is less likely to be affected by a vulnerability at the same time as your corporate email or Web service, so it is a cost-free, \\"out-of-band\\" solution that\'s more resistant to unplanned concurrent downtime or DDoS.\\n\\nHaven gives you zero maintenance, quantum-resistant encryption, superior privacy (compared to email and PGP), and far more convenience."},{"id":"2023/05/08/xx-network-wallet-sign-verify","metadata":{"permalink":"/blog/2023/05/08/xx-network-wallet-sign-verify","source":"@site/blog/2023-05-08-xx-network-wallet-sign-verify/index.md","title":"Sign and verify messages using xx Network wallet","description":"Use the official xx Network Web wallet to sign and verify messages","date":"2023-05-08T00:00:00.000Z","formattedDate":"May 8, 2023","tags":[{"label":"xx network","permalink":"/blog/tags/xx-network"},{"label":"sign","permalink":"/blog/tags/sign"},{"label":"verify","permalink":"/blog/tags/verify"},{"label":"wallet","permalink":"/blog/tags/wallet"}],"readingTime":1.085,"hasTruncateMarker":false,"authors":[{"name":"ArmchairAncap","url":"https://github.com/armchairancap","imageURL":"https://github.com/armchairancap.png","key":"armchairancap"}],"frontMatter":{"slug":"2023/05/08/xx-network-wallet-sign-verify","title":"Sign and verify messages using xx Network wallet","authors":["armchairancap"],"tags":["xx network","sign","verify","wallet"],"description":"Use the official xx Network Web wallet to sign and verify messages","keywords":["xx network","cryptographically","sign","message","validate","signature"]},"unlisted":false,"prevItem":{"title":"Case for xx Network chat link in security.txt","permalink":"/blog/2023/06/05/xx-network-chat-security-dot-txt"},"nextItem":{"title":"Install xx Network Haven","permalink":"/blog/2023/04/30/install-xx-network-haven"}},"content":"## Sign\\n\\nGo to `Developer` > `Sign and Verify` > `Sign message`\\n\\nPick an address (\\"wallet\\") to use and enter a message or other data you wish to sign with your wallet key to `sign the following data`. \\n\\nThis may be any text such as your Speakeasy codename, email address, etc.\\n\\n![Sign message from xx Network wallet](xx-network-wallet-sign.png)\\n\\nClick on the copy icon to copy the signature (`signature of supplied data`) to clipboard. \\n\\n## Verify\\n\\nTo verify, go to `Verify signature` rather than `Sign and Verify`.\\n\\n`Verify using address` means the signer\'s wallet address (so, usually not your own).\\n\\nYou need to provide the same wallet and message that you got, and if everything checks out, the icon next to `the supplied signature` will become a green check mark.\\n\\nBad signatures will fail to verify.\\n\\n![Bad signature fails to verify](xx-network-wallet-verify-bad-hash.png)\\n\\nBad data will also fail to verify against a correct signature.\\n\\n![Correct signature and content verify](xx-network-wallet-verify-incomplete.png)\\n\\nTo be successful, verification requires the same wallet, message data and signature that were used to generate the signature.\\n\\n![Correct verification](xx-network-wallet-verify.png)\\n\\n## Non-deterministic signatures\\n\\nxx Network uses Schnorrkel (sr25519) which doesn\'t create deterministic signatures.\\n\\nFor example, I created two additional signatures. Each time I got a valid, but different, signature to what I got in the first attempt.\\n\\n- `0x2a40ed0.......3187`\\n- `0xdec0ed9.......b78f`"},{"id":"2023/04/30/install-xx-network-haven","metadata":{"permalink":"/blog/2023/04/30/install-xx-network-haven","source":"@site/blog/2023-04-30-install-haven-app.md","title":"Install xx Network Haven","description":"Install your own instance of xx Network Haven application: bare metal, VM, or container","date":"2023-04-30T00:00:00.000Z","formattedDate":"April 30, 2023","tags":[{"label":"xx network","permalink":"/blog/tags/xx-network"},{"label":"haven","permalink":"/blog/tags/haven"},{"label":"speakeasy","permalink":"/blog/tags/speakeasy"}],"readingTime":5.73,"hasTruncateMarker":false,"authors":[{"name":"ArmchairAncap","url":"https://github.com/armchairancap","imageURL":"https://github.com/armchairancap.png","key":"armchairancap"}],"frontMatter":{"slug":"2023/04/30/install-xx-network-haven","title":"Install xx Network Haven","authors":["armchairancap"],"tags":["xx network","haven","speakeasy"],"description":"Install your own instance of xx Network Haven application: bare metal, VM, or container","keywords":["xx network","speakeasy","docker","container","server","instance","haven"]},"unlisted":false,"prevItem":{"title":"Sign and verify messages using xx Network wallet","permalink":"/blog/2023/05/08/xx-network-wallet-sign-verify"}},"content":":::info\\nFor an updated how-to, see [xx Haven Container](https://github.com/armchairancap/xx-haven-container/blob/master/README.md).\\n\\nThe article below is still usable, but the repository is updated, while the article below is kept for archive purposes.\\n:::\\n\\n## Containerized or non-containerized Haven\\n\\nIt\'s probably easier to run Haven in a container. If you have Docker or Postman and want to run Haven in a container, try [this](https://github.com/armchairancap/xx-haven-container).\\n\\nIn the case you want to self-host a non-containerized Haven, read on!\\n\\n## Home or cloud\\n\\nYou may install Speakeasy at home or in the cloud.\\n\\nHaven Web server doesn\'t hold any data but its OS and Node.js logs may store client IPs, that\'s all. \\n\\nWith that in mind, some high-level considerations would be:\\n\\n- We don\'t want our Speakeasy Web app or underlying OS to get compromised\\n- If your Haven is not open to public, or is accessed \\"by invite\\" (maybe with basic authentication or VPN, for your family and friends), you may run it at home\\n- If your Haven is located in the cloud, that\'s acceptable as long as you can protect it from getting compromised so that application code doesn\'t get replaced, OS compromised, or visitors\' IPs leaked.\\n\\nRegarding this last point, if you feel comfortable hosting your Haven server in a small (1G RAM) VM, it is better to open it to public to have the Web server accessed by a variety of addresses. As long as you know how to protect the VM.\\n\\n:::tip\\nEach participant in a conversation can use a different Speakeasy Web server, so many deployment combinations are possible.\\n:::\\n\\n## Software and hardware requirements\\n\\nUse a Linux OS or VM, x86_64 or ARM64 architecture. Haven\'s hardware requirements are minimal:\\n\\n- 1 vCPU\\n- 1 GB RAM\\n- 3 GB disk\\n\\nAll Haven app/web server does is serve the app to the client(s) and that\'s one-time download from each client (around 100 MB download).\\n\\nOne vCPU is enough and won\'t be significantly utilized except when Node.js builds the application or when container image is updated - that takes a long time (15 minutes), but has to be done only when Haven code is updated or rebuilt.\\n\\n## Install Node.js\\n\\nOn generic Linux OS, follow installation instructions for [Node.js](https://nodejs.org/en/download/) version 16.14 or above.\\n\\nThis post was prototyped on DietPi Linux, which currently uses Node.js 20. On DietPi, you may install Node.js as follows:\\n\\n```sh\\nsudo dietpi-software install 9\\n```\\n\\nOr, run `dietpi-software`, select `Search software`, search for `Node.js`, and proceed with installation.\\n\\n## Deploy and run Speakeasy\\n\\nWe need to pick a directory for the application, clone the source to that directory, change some parameters and install.\\n\\n```sh\\nsudo mkdir -p /usr/src/app/speakeasy/.next\\n```\\n\\nIf your username is joe, you could run it as such. Otherwise, create a non-sudoer account and use that.\\n\\n```sh\\nsudo chown -R joe:joe /usr/src/app/speakeasy\\n```\\n\\nThat should allow you to run the rest without using `sudo`.\\n\\nNext, clone the Haven source code, change configuration parameters and run it.\\n\\n```sh\\ngit clone https://git.xx.network/elixxir/speakeasy-web /usr/src/app/speakeasy\\ncd /usr/src/app/speakeasy\\n```\\n\\n### Pick Haven Web application port \\n\\nMost Node.js apps traditionally use port 3000, but you\'ll need something else if you have another app using that port.\\n\\nPick a port for Haven, such as 7080, and use it consistently later:\\n\\n```sh\\nsed -i \'s/next start/next start -p 7080/g\' package.json\\nsed -i \'s/const nextConfig = {/const nextConfig ={\\\\\\\\n  productionBrowserSourceMaps: true,/g\' next.config.js\\nrm -rf node_modules && npm install -g npm@9.6.5 && npm install && npx next telemetry disable && npx next build\\n```\\n\\nIf that went well, you can try to start it from the same directory.\\n\\n```sh\\nnpm start\\n```\\n\\nCheck if Haven is up and running by going to `http://${SERVER_IP}:7080`. You may need to open OS firewall for that. Example for Ubuntu:\\n\\n```sh\\nsudo ufw allow 7080/tcp\\n```\\n\\nSince that port doesn\'t need to be exposed when Speakeasy is running behind HTTPS proxy, it is advisable to delete the rule after testing the application.\\n\\n```sh\\nsudo ufw status numbered\\n\\n```\\n\\nYou won\'t be able to do much with Speakeasy running at `http://host:7080` because there\'s no reverse HTTPS proxy in front of Speakeasy. If you attempt to create an identity you will get stuck at the `Find your Codename` step. \\n\\nAssuming the rules for 7080/tcp are number 7 and 8, and your HTTPS reverse proxy will run on the same host, you can delete the rules: `sudo ufw delete 7 ; sudo ufw delete 8`.\\n\\nThe right firewall port to open on the *host* would be whatever port is used by your HTTPS reverse proxy (e.g. 14443).\\n\\n:::tip\\nTo be fully functional, Haven must be accessed through an HTTPS reverse proxy.\\n:::\\n\\n## Reverse HTTPS proxy\\n\\nDeploy reverse HTTPS proxy in front of Speakeasy so that external port is forwarded to Speakeasy\'s application port (example: `https://fqdn:14443` -> `http://localhost:7080`). To use 14443/tcp, open that firewall port on external network.\\n\\n```sh\\nsudo ufw allow 14443/tcp\\n```\\n\\nNow configure HTTPS reverse proxy to forward incoming 14443/tcp to 7080/tcp, and if you wish make HTTPS reverse proxy and Speakeasy Web app start (`npm start`) automatically.\\n\\nFor that you may use Caddy, Traefik, NGINX or other. \\n\\nThere are many ways to deploy each reverse proxy and at the same time there are no Speakeasy-specific steps here, so the details are an exercise for the reader. Find and try the official or community examples for your proxy and Node.js.\\n\\n### Custom port, host or path\\n\\nIn the case Speakeasy is the only application proxied by HTTPS reverse proxy, it is most convenient to expose it at `https://host:443`.\\n\\nIn the case the same HTTPS reverse proxy is used for several applications, Speakeasy can be hosted in a directory (or, more complicated, at a dedicated virtual host name or FQDN).\\n\\n### TLS certificate\\n\\nIn any and all cases, your reverse HTTPS proxy would need a TLS certificate.\\n\\nIf your reverse proxy integrates with Let\'s Encrypt, you could expose reverse proxy (and indirectly Speakeasy) to the Internet rather than use internal or even self-signed TLS certificate - it\'s more secure, especially if you additionally protect HTTPS proxy with firewall rules or basic (or other) authentication.\\n\\nHaven Web server doesn\'t host any account or chat data. If you expose Speakeasy to the Internet, the main concern is to prevent NodeJS from application server take-over and tampering, so it can be advantageous to run it using a limited local account, and optionally add some form of authentication to your HTTPS proxy.\\n\\nOnce a TLS-enabled proxy is functional, you can access Haven, create a new codename or import existing, and start using Haven.\\n\\n## Update Haven\\n\\nAs mentioned before, Haven can be simply wiped and re-installed because only serves the application code and does not store any client data.\\n\\nThe official instance at speakeasy.tech usually runs the latest version, so visit that site from time to time, or watch the Speakeasy repository for new releases, or follow xx Network on Twitter."}]}')}}]);