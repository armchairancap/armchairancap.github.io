<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>ArmchairAncap Blog</title>
        <link>https://armchairancap.github.io/blog</link>
        <description>ArmchairAncap Blog</description>
        <lastBuildDate>Mon, 08 May 2023 00:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[Sign and verify messages using xx Network wallet]]></title>
            <link>https://armchairancap.github.io/blog/2023/05/08/xx-network-wallet-sign-verify</link>
            <guid>https://armchairancap.github.io/blog/2023/05/08/xx-network-wallet-sign-verify</guid>
            <pubDate>Mon, 08 May 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[Sign]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="sign">Sign<a href="#sign" class="hash-link" aria-label="Direct link to Sign" title="Direct link to Sign">​</a></h2><p>Go to <code>Developer</code> &gt; <code>Sign and Verify</code> &gt; <code>Sign message</code></p><p>Pick an address ("wallet") to use and enter a message or other data you wish to sign with your wallet key to <code>sign the following data</code>. </p><p>This may be any text such as your Speakeasy codename, email address, etc.</p><p><img loading="lazy" alt="Sign message from xx Network wallet" src="/assets/images/xx-network-wallet-sign-8da08f66d9202f2b160d42ac4464eff5.png" width="710" height="402" class="img_ev3q"></p><p>Click on the copy icon to copy the signature (<code>signature of supplied data</code>) to clipboard. </p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="verify">Verify<a href="#verify" class="hash-link" aria-label="Direct link to Verify" title="Direct link to Verify">​</a></h2><p>To verify, go to <code>Verify signature</code> rather than <code>Sign and Verify</code>.</p><p><code>Verify using address</code> means the signer's wallet address (so, usually not your own).</p><p>You need to provide the same wallet and message that you got, and if everything checks out, the icon next to <code>the supplied signature</code> will become a green check mark.</p><p>Bad signatures will fail to verify.</p><p><img loading="lazy" alt="Bad signature fails to verify" src="/assets/images/xx-network-wallet-verify-bad-hash-0663fee410bf7df525709e93e80dfa63.png" width="710" height="402" class="img_ev3q"></p><p>Bad data will also fail to verify against a correct signature.</p><p><img loading="lazy" alt="Correct signature and content verify" src="/assets/images/xx-network-wallet-verify-incomplete-f059411c8c7f93b658bd86ccde36d043.png" width="710" height="402" class="img_ev3q"></p><p>To be successful, verification requires the same wallet, message data and signature that were used to generate the signature.</p><p><img loading="lazy" alt="Correct verification" src="/assets/images/xx-network-wallet-verify-f61496bae4a508271925217cf5c3356e.png" width="710" height="402" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="non-deterministic-signatures">Non-deterministic signatures<a href="#non-deterministic-signatures" class="hash-link" aria-label="Direct link to Non-deterministic signatures" title="Direct link to Non-deterministic signatures">​</a></h2><p>xx Network uses Schnorrkel (sr25519) which doesn't create deterministic signatures.</p><p>For example, I created two additional signatures. Each time I got a valid, but different, signature to what I got in the first attempt.</p><ul><li><code>0x2a40ed0.......3187</code></li><li><code>0xdec0ed9.......b78f</code></li></ul>]]></content:encoded>
            <category>xx network</category>
            <category>sign</category>
            <category>verify</category>
            <category>wallet</category>
        </item>
        <item>
            <title><![CDATA[Install own xx Network Speakeasy Web server]]></title>
            <link>https://armchairancap.github.io/blog/2023/04/30/install-xx-network-speakeasy</link>
            <guid>https://armchairancap.github.io/blog/2023/04/30/install-xx-network-speakeasy</guid>
            <pubDate>Sun, 30 Apr 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[Containerized or non-containerized Speakeasy]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="containerized-or-non-containerized-speakeasy">Containerized or non-containerized Speakeasy<a href="#containerized-or-non-containerized-speakeasy" class="hash-link" aria-label="Direct link to Containerized or non-containerized Speakeasy" title="Direct link to Containerized or non-containerized Speakeasy">​</a></h2><p>It's probably easier to run Speakeasy in a container. If you have Docker or Postman, you may try <a href="https://github.com/armchairancap/xx-speakeasy-container" target="_blank" rel="noopener noreferrer">these</a> instructions.</p><p>In the case you want to self-host a non-containerized Speakeasy, read on!</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="home-or-cloud">Home or cloud<a href="#home-or-cloud" class="hash-link" aria-label="Direct link to Home or cloud" title="Direct link to Home or cloud">​</a></h2><p>You may install Speakeasy at home or in the cloud.</p><p>Speakeasy Web server doesn't hold any data but its OS and Node.js logs may store client IPs, that's all. </p><p>With that in mind, high-level considerations would be:</p><ul><li>We don't want our Speakeasy Web app or underlying OS to get compromised</li><li>If your Speakeasy server is not open to public, or is accessed "by invite" (maybe with basic authentication or VPN, for your family and friends), you may run it at home</li><li>If your Speakeasy server is located in the cloud, that's acceptable as long as you can protect it from getting compromised so that application code doesn't get replaced, OS compromised, or visitors' IPs leaked.</li></ul><p>Regarding this last point, if you feel comfortable hosting your Speakeasy server in a small (1G RAM) VM, it is better to open it to public to have the Web server accessed by a variety of addresses. As long as you know how to protect the VM.</p><div class="theme-admonition theme-admonition-tip alert alert--success admonition_LlT9"><div class="admonitionHeading_tbUL"><span class="admonitionIcon_kALy"><svg viewBox="0 0 12 16"><path fill-rule="evenodd" d="M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"></path></svg></span>tip</div><div class="admonitionContent_S0QG"><p>Each participant in a conversation can use a different Speakeasy Web server, so many combinations are possible.</p></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="software-and-hardware-requirements">Software and hardware requirements<a href="#software-and-hardware-requirements" class="hash-link" aria-label="Direct link to Software and hardware requirements" title="Direct link to Software and hardware requirements">​</a></h2><p>Use a Linux OS or VM, x86_64 or ARM64 architecture. Required specifications are minimal:</p><ul><li>1 vCPU</li><li>1 GB RAM</li></ul><p>All Speakeasy app/web server does is serve the app to the client(s) and that's one-time download from each client. </p><p>One vCPU is enough and won't be significantly utilized except when Node.js builds the application - that takes a long time (15 minutes), but has to be done only when Speakeasy app is updated or rebuilt.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="install-nodejs">Install Node.js<a href="#install-nodejs" class="hash-link" aria-label="Direct link to Install Node.js" title="Direct link to Install Node.js">​</a></h2><p>This post was prototyped on DietPi, which currently uses Node.js 20. </p><p>On DietPi, you may install Node.js as follows:</p><div class="language-sh codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sh codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">sudo dietpi-software install 9</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Or, run <code>dietpi-software</code>, select <code>Search software</code>, search for <code>Node.js</code>, and proceed with installation.</p><p>For other Linux OS, follow their installation instructions for <a href="https://nodejs.org/en/download/" target="_blank" rel="noopener noreferrer">Node.js</a> version 16.14 or above.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="deploy-and-run-speakeasy">Deploy and run Speakeasy<a href="#deploy-and-run-speakeasy" class="hash-link" aria-label="Direct link to Deploy and run Speakeasy" title="Direct link to Deploy and run Speakeasy">​</a></h2><p>We need to pick a directory for the application, clone the source to that directory, change some parameters and install.</p><div class="language-sh codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sh codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">sudo mkdir -p /usr/src/app/speakeasy/.next</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>If your username is joe, you could run it as such. Otherwise, create a non-sudoer account and use that.</p><div class="language-sh codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sh codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">sudo chown -R joe:joe /usr/src/app/speakeasy</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>That should allow you to run the rest without using <code>sudo</code>.</p><p>Next, clone the Speakeasy source code, change configuration parameters and run it.</p><div class="language-sh codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sh codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">git clone https://git.xx.network/elixxir/speakeasy-web /usr/src/app/speakeasy</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">cd /usr/src/app/speakeasy</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="pick-speakeasy-web-application-port">Pick Speakeasy Web application port<a href="#pick-speakeasy-web-application-port" class="hash-link" aria-label="Direct link to Pick Speakeasy Web application port" title="Direct link to Pick Speakeasy Web application port">​</a></h3><p>Pick a port to run Speakeasy on, such as 7080, and use it consistently later:</p><div class="language-sh codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sh codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">sed -i 's/next start/next start -p 7080/g' package.json</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">sed -i 's/const nextConfig = {/const nextConfig ={\\n  productionBrowserSourceMaps: true,/g' next.config.js</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">rm -rf node_modules &amp;&amp; npm install -g npm@9.6.5 &amp;&amp; npm install &amp;&amp; npx next telemetry disable &amp;&amp; npx next build</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">npm start</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Check if Speakeasy app is up and running by going to <code>http://${SERVER_IP}:7080</code>. You may need to open OS firewall for that. Example for Ubuntu:</p><div class="language-sh codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sh codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">sudo ufw allow 7080/tcp</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Since that port doesn't need to be exposed when Speakeasy is running behind HTTPS proxy, it is advisable to delete the rule after testing the application.</p><div class="language-sh codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sh codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">sudo ufw status numbered</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>You won't be able to do much with Speakeasy running at <code>http://host:7080</code> because there's no reverse HTTPS proxy in front of Speakeasy. If you attempt to create an identity you will get stuck at the <code>Find your Codename</code> step. </p><p>Assuming the rules for 7080/tcp are number 7 and 8, and your HTTPS reverse proxy will run on the same host, you can delete the rules: <code>sudo ufw delete 7 ; sudo ufw delete 8</code>.</p><p>The right firewall port to open on the <em>host</em> would be whatever port is used by your HTTPS reverse proxy (e.g. 14443).</p><div class="theme-admonition theme-admonition-tip alert alert--success admonition_LlT9"><div class="admonitionHeading_tbUL"><span class="admonitionIcon_kALy"><svg viewBox="0 0 12 16"><path fill-rule="evenodd" d="M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"></path></svg></span>tip</div><div class="admonitionContent_S0QG"><p>To be fully functional, Speakeasy Web app must be accessed through an HTTPS proxy.</p></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="reverse-https-proxy">Reverse HTTPS proxy<a href="#reverse-https-proxy" class="hash-link" aria-label="Direct link to Reverse HTTPS proxy" title="Direct link to Reverse HTTPS proxy">​</a></h2><p>Deploy reverse HTTPS proxy in front of Speakeasy so that external port is forwarded to Speakeasy's application port (example: <code>https://fqdn:14443</code> -&gt; <code>http://localhost:7080</code>). To use 14443/tcp, open that firewall port on external network.</p><div class="language-sh codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sh codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">sudo ufw allow 14443/tcp</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Now configure HTTPS reverse proxy to forward incoming 14443/tcp to 7080/tcp, and if you wish make HTTPS reverse proxy and Speakeasy Web app start (<code>npm start</code>) automatically.</p><p>For that you may use Caddy, Traefik, NGINX or other. </p><p>There are many ways to deploy each reverse proxy and at the same time there are no Speakeasy-specific steps here, so the details are an exercise for the reader. Find and try the official or community examples for your proxy and Node.js.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="custom-port-host-or-path">Custom port, host or path<a href="#custom-port-host-or-path" class="hash-link" aria-label="Direct link to Custom port, host or path" title="Direct link to Custom port, host or path">​</a></h3><p>In the case Speakeasy is the only application proxied by HTTPS reverse proxy, it is most convenient to expose it at <code>https://host:443</code>.</p><p>In the case the same HTTPS reverse proxy is used for several applications, Speakeasy can be hosted in a directory (or, more complicated, at a dedicated virtual host name or FQDN).</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="tls-certificate">TLS certificate<a href="#tls-certificate" class="hash-link" aria-label="Direct link to TLS certificate" title="Direct link to TLS certificate">​</a></h3><p>In any and all cases, your reverse HTTPS proxy would need a TLS certificate.</p><p>If your reverse proxy integrates with Let's Encrypt, you could expose Speakeasy to the Internet rather than use internal or even self-signed TLS certificate.</p><p>Speakeasy Web server doesn't host any account or chat data. If you expose Speakeasy to the Internet, the main concern is to prevent NodeJS from application server take-over and tampering, so it can be advantageous to run it using a limited local account, and optionally add some form of authentication to your HTTPS proxy.</p><p>Once a TLS-enabled proxy is functional, you can access Speakeasy, create a new codename or import existing, and start using Speakeasy.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="update-speakeasy">Update Speakeasy<a href="#update-speakeasy" class="hash-link" aria-label="Direct link to Update Speakeasy" title="Direct link to Update Speakeasy">​</a></h2><p>As mentioned before, Speakeasy can be simply wiped and re-installed because only serves the application code and does not store any client data.</p><p>The official instance at speakeasy.tech usually runs the latest version, so visit that site from time to time, or watch the Speakeasy repository for new releases, or follow xx Network on Twitter.</p>]]></content:encoded>
            <category>xx network</category>
            <category>speakeasy</category>
        </item>
    </channel>
</rss>